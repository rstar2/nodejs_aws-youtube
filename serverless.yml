service: my-youtube-download

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  profile: serverless-cli

  lambdaHashingVersion: 20201221

  runtime: nodejs14.x
  # timeout: 10 # global timeout - optional, in seconds, default is 6

  stage: ${opt:stage, 'dev'}
  region: eu-central-1

  iamRoleStatements:
    # all the Lambda Function(s) to access the specific S3 Bucket
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "TranscodedBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "TranscodedBucket" }, '/*' ] ]  }

  environment:
    # service: ${self:service}
    stage: ${self:provider.stage}

    # TODO: get somehow from the Function's and Bucket's ARN
    AWS_LAMBDA_TRANSCODE: ${self:service}-${self:provider.stage}-transcode
    AWS_S3_BUCKET: ${self:service}-${self:provider.stage}

package:
  # if 'artifact' is specified patterns will be ignored - this allows for manual zipping
  artifact: aws-artifact.zip
  patterns:
    - '!ffmpeg/**'
    - '!aws-artifact.zip'
    - '!aws-build-and-deploy.sh'
    - '!README.md'
    - '!.vscode'
    - '!.eslintrc'
    - '!package-lock.json'
    

functions:
  transcode:
    handler: src/aws/lambda-transcode.handler
    timeout: 900 # use all the AWS Maximum execution duration per request limit

    # environment:
    #   # Use the Exodus ffmpeg bundled executable.
    #   FFMPEG_PATH: /var/task/exodus/bin/ffmpeg

    # If no trigger-events are specified that means that the function will be able to be called only from the AWS SKD
    # events:
    #   - http:
    #       path: transcode
    #       method: GET

  app-express:
    handler: src/aws/lambda-express.handler
    timeout: 30
    events:
      # all routes get proxied to the Express router
      - http: 
          path: /
          method: ANY
          cors: true
      - http: 
          path: '/{any+}'
          method: ANY
          cors: true

    # Using the 'serverless-iam-roles-per-function' plugin we can
    # easily define IAM roles per function
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"  

resources:
  Resources:
    TranscodedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}
